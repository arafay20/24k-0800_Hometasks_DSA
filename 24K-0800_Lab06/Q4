
#include<iostream>

using namespace std;


int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

bool isoperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
}

class CharStack {
private:
    char arr[100];
    int top;

public:
    CharStack() {
        top = -1;
    }

    void push(char c) {
        if (top < 99)
            arr[++top] = c;
        else
            cout << "Stack overflow!" << endl;
    }

    char pop() {
        if (top >= 0)
            return arr[top--];
        else
            return '\0'; // Stack underflow
    }

    char peek() {
        if (top >= 0)
            return arr[top];
        else
            return '\0';
    }

    bool empty() {
        return top == -1;
    }
};

string infixtopostfix(string infix){
	
	string result;	
	
	CharStack st;
	
	char c;
	
	for(int i = 0 ; i < infix.length() ; i++){
		
		c = infix[i];
		
		if(isalnum(c)){
			result+= c;
		}
		
		if(c == '('){
			 
			 st.push(c);
		}
		
		if(c == ')'){
			while(!st.empty() && st.peek() !='('){
				
				result+= st.pop();
			}
			
			st.pop();
		}
		
		
		if( isoperator(c)){
			
			while(!st.empty() && precedence(st.peek()) >= precedence(c)){
				
			if (c == '^' && st.peek() == '^') break;
                result += st.pop();
			}
			st.push(c);
		}
	}
	
	while(!st.empty()){
		result+=st.pop();
	}
	
	
	return result;
}
int main () {
	
	string infix = "a+b*(c^d-e)^(f+g*h)-i";
	
	string result = infixtopostfix(infix);
	cout << result << endl;
	return 0;
}
