
#include<iostream>

using namespace std;

bool issafe(int **arr,int x,int y,int n){
	
	if(x >= 0 && y >=0 && x < n && y < n && arr[x][y] ==1){
		return true;
	}
	
	return false;
}

bool findpath(int **arr, int x, int y , int n, int **solarr){
	
	if(x == (n-1) && y==(n-1) && arr[x][y] == 1){
		
		solarr[x][y] = 1;
		return true;
	}
	
	
	if(issafe(arr,x,y,n) && solarr[x][y] == 0){
		solarr[x][y] = 1;
		if(findpath(arr,x+1,y,n,solarr)){
			return true;
		}
		if(findpath(arr,x,y+1,n,solarr)){
			return true;
		}
		
		solarr[x][y] = 0; // this line primarily is responsible for backtracking
		return false;// followed by this line
	}
	return false;
}

void display(int **solarr, int N){
	
	cout << "safe escape route" <<  endl;
	
	 for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++)
                cout << solarr[i][j] << " ";
            cout << endl;
        }
        
}

int main () {
	
	int n;
	
	cout << "enter maze dimension : " ;
	cin >>n ;
	
	int **arr = new int*[n];
	int **solarr = new int*[n];
	
	for(int i = 0 ; i < n ; i++ ){
		
		arr[i] = new int[n];
		solarr[i] = new int[n];
		
	}
	
	for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << "Enter element[" << i << "][" << j << "]: ";
            cin >> arr[i][j];
            solarr[i][j] = 0;
    }
}
    
    bool result = findpath(arr, 0,0,n, solarr); // if no safe route exists then the recursive function will return false , in that case given below statement will execute
    
    if(result){
    	display(solarr,n);
	}else {
		cout << "no path found" << endl;
	}
	
	return 0;
}
